What happens when you initialize a repository? Why do you need to do it?
	
	The folder starts to be treated like a git project. No commits are automatically
	created. The folder containing the status for the project is created (it is a 
	hidden file). We need to do it to be able to choose which files are going to be 
	tracked by git's version control. 
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It is an intermediate point between the working directory and the repository. It 
	offers the value of letting the user decide which files are going to be commited
	so that it is not necessary to commit all files in the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	By adding the file in which the one logical change has taken place and then 
	commiting, then repeating the process for each remaining file that had uncommited
	logical changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When we want to add a new feature, but are not sure it will be really used or
	official, or providing the whole project with another language, or to test new
	changes. The branches would keep the changes apart from the original project, so
	both can be altered by checking out.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?


