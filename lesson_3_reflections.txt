When would you want to use a remote repository rather than keeping all your work local?

	When the project is shared with other people or when I work on it from different 
	machines.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	Because sometimes we need to work more on a feature before making it visible to the
	public.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

	1. Branches are created locally in a repository. They alter the flow that the commits
	would normally follow in a project so new features can be added or tests can be run.
	We use it when we want to add those features.
	
	2. Clones create a copy of a whole repository either locally or from Github with all
	the current commit history. We use them when we want to create a copy of the project
	to work on from a computer.
	
	3. Forks work similarly as clones, but they only operate inside Github and they also
	keep the reference to the original project, although changes in the new project
	will not affect the original. Forked projects can then be cloned. We use forks when
	we want to be able to refer back to the original project.
	
What is the benefit of having a copy of the last known state of the remote stored 
locally?

	It helps people keep working on a project even if they temporarily do not have
	access to the Internet. It will be helpful when it is desired to merge the local
	and remote versions, knowing that the remote one might have changed.
	
How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

	I would collaborate using another system such as Dropbox. It would make updates
	faster and the system would be easier to use, but I wouldn't have a way of keep
	track of every update with the notes (like commits) that make it easier to know
	exactly what was done in each version of the program, so debugging would be rather
	difficult.
	
When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

	Changes in a separate branch benefit more from new features testing and they are
	more appropriate when the programmer is not sure whether there will be major crashes
	with those. Branches then will allow the project to be safer, since the master branch
	remains untouched. On the other hand, committing directly to master is simpler to do
	and also easier to push to GitHub.